#!/usr/bin/env ruby

require "yaml"

class SCLI
  def self.run(args)
    new(args).run
  end

  attr_reader :short_code, :reader

  def initialize(args)
    @args = args
  end

  def run
    parser = ArgumentParser.new(@args)
    config = Config.new
    short_code = parser.short_code
    uri = config.look_up(short_code)
    exec "ssh #{uri}"
  rescue MissingConfigFile
    puts "The configuration file '~/.ssh_short_codes' is missing. Add your short codes in YAML format to that file."
  rescue MissingShortCode
    puts "usage: s SHORT_CODE"
  rescue InvalidConfigFile
    puts "The configuration file '~/.ssh_short_codes' is malformed. Make sure that it's a YAML dictionary."
  rescue InvalidShortCode
    puts "That short code does not appear in your '~/.ssh_short_codes' configuration file. Add it to the file if you'd like to use it."
  end

  class ArgumentParser
    def initialize(args)
      @args = args
    end

    def short_code
      @args.fetch(0)
    rescue IndexError
      raise MissingShortCode
    end
  end

  class Config
    PATH = File.expand_path("~/.ssh_short_codes")

    def initialize
      @short_codes = YAML.load_file(PATH)
    rescue Errno::ENOENT
      raise MissingConfigFile
    rescue Psych::SyntaxError
      raise InvalidConfigFile
    end

    def look_up(short_code)
      @short_codes.fetch(short_code)
    rescue IndexError
      raise InvalidShortCode
    rescue NoMethodError
      raise InvalidConfigFile
    end
  end

  class Error < StandardError
    attr_reader :cause

    def initialize(message = nil, cause = $!)
      super(message)
      @cause = cause
    end
  end

  class MissingConfigFile < Error
  end

  class MissingShortCode < Error
  end

  class InvalidConfigFile < Error
  end

  class InvalidShortCode < Error
  end
end

SCLI.run(ARGV)
